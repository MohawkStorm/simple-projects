let display = document.querySelector(".display");
let buttons = document.querySelectorAll(".buttons button");
let setDisplayToDefault;

function disableOperatorButtons(status) {
  buttons.forEach((button) => {
    if (button.dataset.type === "operator") {
      button.disabled = status;
    }
  });
}

function equalButton(value) {
  const result = eval(value);
  return result;
}

function clearDisplay() {
  display.value = "";
}

function deleteButton() {
  display.value = display.value.slice(0, -1);
  return display.value;
}

buttons.forEach((button) => {
  button.addEventListener("click", () => {
    const buttonValue = button.dataset.value;
    const buttonType = button.dataset.type;
    const lastChar = display.value.slice(-1);
    const operators = ["+", "-", "/", "*", "%"];

    if (display.value === "Error") {
      clearDisplay();
      clearTimeout(setDisplayToDefault);
    }
    if (buttonType === "clear") {
      clearDisplay();
      return;
    }

    if (buttonType === "decimal") {
      if (display.value.trim() === "") {
        display.value = "0.";
        return;
      }
      // Generated by ChatGPT: start
      let lastOperatorIndex = Math.max(
        display.value.lastIndexOf("+"),
        display.value.lastIndexOf("-"),
        display.value.lastIndexOf("*"),
        display.value.lastIndexOf("/"),
        display.value.lastIndexOf("%")
      );
      let lastNumber = display.value.slice(lastOperatorIndex + 1);
      if (lastNumber.includes(".")) {
        return;
      }
      // Generated by ChatGPT: end
    }

    if (buttonType === "delete") {
      deleteButton();
      return;
    }

    if (buttonType === "operator") {
      if (lastChar === ".") {
        deleteButton();
      }
    }

    if (buttonType === "number") {
      if (display.value.trim() === "0") {
        if (buttonValue === "0") {
          return;
        } else {
          display.value = buttonValue;
          return;
        }
      }
    }

    if (buttonType === "equal") {
      if (display.value.trim() === "") {
        return;
      }
      try {
        display.value = equalButton(display.value);
        return;
      } catch (error) {
        display.value = "Error";
        setDisplayToDefault = setTimeout(() => {
          clearDisplay();
        }, 1000);
        return;
      }
    }

    if (
      (display.value.trim() === "" && buttonType === "operator") ||
      (operators.includes(lastChar) && buttonType === "operator")
    ) {
      disableOperatorButtons(true);
      return;
    } else {
      clearTimeout(setDisplayToDefault);
      disableOperatorButtons(false);
      display.value += buttonValue;
    }
  });
});
